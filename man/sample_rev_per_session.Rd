% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample_rev_per_session.R
\name{sample_rev_per_session}
\alias{sample_rev_per_session}
\title{Sample Rev Per Session}
\usage{
sample_rev_per_session(input_df, priors, n_samples = 50000)
}
\arguments{
\item{input_df}{Dataframe containing option_name (str),
sum_conversions (dbl), sum_revenue (dbl), and sum_clicks (dbl).}

\item{priors}{Optional list of priors {alpha0, beta0} for Beta
and {k0, theta0} for Gamma. Default \eqn{Beta(1,1)}
and \eqn{Gamma(1, 250)} will be use otherwise.}

\item{n_samples}{Optional integer value. Defaults to 50,000 samples.}
}
\value{
input_df with 3 new nested columns `beta_params`, `gamma_params`, and `samples`
}
\description{
Adds 3 new nested columns to the input_df: `beta_params`, `gamma_params`, and `samples`
    `beta_params` and `gamma_params` in each row should be a tibble of length 2 (\eqn{\alpha}
        and \eqn{\beta} parameters and \eqn{k} and \eqn{\theta} parameters)
    `samples` in each row should be a tibble of length `n_samples`
}
\details{
See update_rules vignette for a mathematical representation.

\deqn{RevPerSession = RevPerOrder * OrdersPerClick}
This is a combination of a Beta-Bernoulli update and a Gamma-Exponential update.

\deqn{conversion_i ~ Bernoulli(\phi)}
\deqn{revenue_i ~ Exponential(\lambda)}
\deqn{\phi ~ Beta(\alpha, \beta)}
\deqn{\lambda ~ Gamma(k, \theta)}

\deqn{revenue_i ~ Bernoulli(\phi) * Exponential(\lambda)^-1)}
\deqn{Rev Per Session ~ \phi / \lambda}

Conversion Rate is sampled from a Beta distribution with a Binomial likelihood
of an individual converting.

Average Rev Per Order is sampled from a Gamma distribution with an Exponential likelihood
of Revenue from an individual order.
This function makes sense to use if there is a distribution of possible revenue values
that can be produced from a single order or conversion.
}
